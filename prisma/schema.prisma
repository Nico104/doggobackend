generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // url      = env("DATABASE_URL")
  url      = "postgresql://datamaster:Granatapfel@127.0.0.1:5432/datamaster"
  // url      = "postgresql://postgres:6978@127.0.0.1:5432/doggobase?schema=public"
}

enum Gender {
  MALE
  FEMALE
  NONE
}

// model Country {
//   country_key             String        @id @unique
//   country_flag_image_path String
//   country_phone_prefix    String
//   // country_language        Language      @relation(fields: [language_key], references: [language_key])
//   // language_key            String
//   PhoneNumber             PhoneNumber[]
// }

model Language {
  language_key                          String         @id @unique
  language_key_translate                String         @default("EN")
  language_label                        String
  language_isAvailableForAppTranslation Boolean        @default(false)
  langauge_flag_image_path              String         @default("flags/langauge/english_flag.png")
  Description                           Description[]
  // Country                               Country[]
  Contact                               Contact[]
  UserSettings                          UserSettings[]
}

model User {
  uid                  String                 @id @unique
  displayName          String?
  email                String                 @unique
  providerId           String
  email_verified       Boolean
  userSignUpDateTime   DateTime               @default(now())
  // userpassword                String
  Pet                  Pet[]
  Tag                  CollarTag[]
  UserLogins           UserLogins[]
  // ContactDescription   ContactDescription[]
  // ChangeEmailVerificationCode ChangeEmailVerificationCode[]
  Contact              Contact[]
  DeviceMessagingToken DeviceMessagingToken[]
  Notification         Notification[]
  ContactUs            ContactUs[]
  UserSettings         UserSettings?
  NotificationSettings NotificationSettings?
}

// model User {
//   uid                   String                        @id @unique
//   userSignUpDateTime          DateTime                      @default(now())
//   userpassword                String
//   name                        String                        @default("")
//   user_pet_profile            Pet[]
//   Tag                         CollarTag[]
//   UserLogins                  UserLogins[]
//   ContactDescription          ContactDescription[]
//   ChangeEmailVerificationCode ChangeEmailVerificationCode[]
//   Contact                     Contact[]
//   DeviceMessagingToken        DeviceMessagingToken[]
//   Notification                Notification[]
// }

//Could become logged in device
model DeviceMessagingToken {
  token String @id
  User  User   @relation(fields: [uid], references: [uid], onDelete: Cascade)
  uid   String
}

model Notification {
  notificationId    Int      @id @default(autoincrement())
  notificationType  String
  notificationTitle String
  notificationBody  String
  creationDateTime  DateTime @default(now())
  read              Boolean  @default(false)
  seen              Boolean  @default(false)
  User              User     @relation(fields: [uid], references: [uid], onDelete: Cascade)
  uid               String
}

// model PendingAccount {
//   pendingAccountId Int      @id @default(autoincrement())
//   pendingEmail     String
//   verificationCode Int
//   approved         Boolean  @default(false)
//   isValid          Boolean  @default(true)
//   createdDate      DateTime @default(now())
// }

// model ChangeEmailVerificationCode {
//   changeEmailVerificationCodeId Int       @id @default(autoincrement())
//   verificationCode              String
//   email                         String
//   sendBy                        User?     @relation(fields: [uid], references: [uid])
//   uid                 String?
//   isValid                       Boolean   @default(true)
//   createdDateTime               DateTime  @default(now())
//   verifiedDateTime              DateTime?
//   unvalidifiedDateTime          DateTime?
// }

model UserSettings {
  uid                String   @id
  userAppLanguageKey String   @default("en")
  userLanguage       Language @relation(fields: [userAppLanguageKey], references: [language_key])
  user               User     @relation(fields: [uid], references: [uid], onDelete: Cascade)
}

model NotificationSettings {
  uid           String  @id
  user          User    @relation(fields: [uid], references: [uid], onDelete: Cascade)
  notification1 Boolean @default(true)
  notification2 Boolean @default(true)
  notification3 Boolean @default(true)
  notification4 Boolean @default(true)
  notification5 Boolean @default(true)
  email1        Boolean @default(true)
  email2        Boolean @default(true)
  email3        Boolean @default(true)
  email4        Boolean @default(true)
  email5        Boolean @default(true)
}

model UserLogins {
  userLgoin_id  Int      @id @default(autoincrement())
  user          User     @relation(fields: [uid], references: [uid], onDelete: Cascade)
  uid           String
  ipAddress     String?
  loginDateTime DateTime @default(now())
}

model CollarTag {
  collarTag_id     String    @id @unique
  assigned_pet     Pet?      @relation(fields: [petProfile_id], references: [profile_id])
  petProfile_id    Int?
  user             User?     @relation(fields: [uid], references: [uid], onDelete: Cascade)
  uid              String?
  assignedDate     DateTime?
  activationCode   String    @unique
  publicCode       String    @unique
  // CollarTagPersonalisation CollarTagPersonalisation?
  // picturePath      String
  createdDate      DateTime  @default(now())
  model            TagModel  @relation(fields: [tagModelTagModel], references: [tagModel])
  tagModelTagModel Int
  sku              String?   @unique
}

model TagModel {
  tagModel             Int         @id @default(autoincrement())
  tagModel_shortName   String      @unique
  tagModel_Description String      @unique
  tagModel_Label       String
  picturePath          String
  createdDate          DateTime    @default(now())
  CollarTag            CollarTag[]
}

// model CollarTagPersonalisation {
//   collarTagPersonalisationId Int          @id @default(autoincrement())
//   collarTag                  CollarTag    @relation(fields: [collarTag_id], references: [collarTag_id])
//   collarTag_id               String       @unique
//   primaryColorName           String
//   secondaryColorName         String
//   baseColorName              String
//   letter                     String?
//   letterStyle                LetterStyle?

//   appBackgroundColorHex   String
//   appPetTagPrimaryColor   String
//   appPetTagSecundaryColor String
// }

model Pet {
  profile_id                Int           @id @default(autoincrement())
  profile_creation_DateTime DateTime      @default(now())
  user                      User          @relation(fields: [uid], references: [uid], onDelete: Cascade)
  //should be pet_profile_useremail
  uid                       String
  pet_name                  String
  pet_gender                Gender?
  pet_chip_id               String?
  pet_description           Description[]
  description               String        @default("")
  // pet_important_information ImportantInformation?

  pet_documents           Document[]
  pet_pictures            PetPicture[]
  pet_is_Lost             Boolean
  pet_is_lost_text        String                @default("")
  pet_profile_scans       Scan[]
  Tag                     CollarTag[]
  Contact                 Contact[]
  MedicalInformation      MedicalInformation?
  // medical_information_id    Int
  BehaviourInformation    BehaviourInformation?
  // behaviour_information_id  Int
  hide_contacts           Boolean               @default(true)
  hide_information        Boolean               @default(false)
  hide_medical            Boolean               @default(true)
  hide_pictures           Boolean               @default(false)
  hide_documents          Boolean               @default(true)
  hide_description        Boolean               @default(false)
  scan_hide_contacts      Boolean               @default(false)
  scan_hide_information   Boolean               @default(false)
  scan_hide_medical       Boolean               @default(true)
  scan_hide_pictures      Boolean               @default(false)
  scan_hide_documents     Boolean               @default(false)
  scan_hide_description   Boolean               @default(false)
  pet_tattooID            String?
  pet_licenceID           String?
  pet_favorite_toys       String?
  pet_favorite_activities String?
  pet_behavioral_notes    String?
  pet_special_needs       String?
  pet_diet_preferences    String?
}

model Contact {
  contact_id                Int                    @id @default(autoincrement())
  contact_creation_DateTime DateTime               @default(now())
  contact_name              String
  contact_picture_link      String?
  contact_description       String                 @default("")
  // contact_description                      ContactDescription? @relation(fields: [contactDescriptionContact_description_id], references: [contact_description_id])
  // contactDescriptionContact_description_id Int?
  contact_telephone_numbers PhoneNumber[]
  contact_email             String?
  contact_address           String?
  Pet                       Pet[]
  createdBy                 User                   @relation(fields: [uid], references: [uid], onDelete: Cascade)
  uid                       String
  languages_spoken          Language[]
  contact_facebook          String?
  contact_instagram         String?
  social_medias             ContactOnSocialMedia[]
}

model ContactOnSocialMedia {
  contact                   Contact     @relation(fields: [contact_id], references: [contact_id])
  contact_id                Int
  social_media              SocialMedia @relation(fields: [social_media_Id], references: [id])
  social_media_Id           Int
  assignedAt                DateTime    @default(now())
  social_media_account_name String

  @@id([contact_id, social_media_Id])
}

model SocialMedia {
  id                  Int                    @id @default(autoincrement())
  name                String
  imagepath           String
  hintText            String                 @default("")
  ContactSocialMedias ContactOnSocialMedia[]
}

// model ContactDescription {
//   contact_description_id                Int       @id @default(autoincrement())
//   contact_description_label             String
//   contact_description_hex               String
//   Contact                               Contact[]
//   created_by                            User      @relation(fields: [uid], references: [uid])
//   uid                                   String
//   contact_description_creation_DateTime DateTime  @default(now())
//   contact_description_updated_DateTime  DateTime  @default(now())
// }

model Description {
  Pet                      Pet      @relation(fields: [petProfile_id], references: [profile_id], onDelete: Cascade)
  petProfile_id            Int
  description_text         String
  description_language     Language @relation(fields: [description_language_key], references: [language_key])
  description_language_key String

  @@id([petProfile_id, description_language_key])
}

// model ImportantInformation {
//   important_information_id   Int    @id @default(autoincrement())
//   Pet                        Pet    @relation(fields: [petProfile_id], references: [profile_id], onDelete: Cascade)
//   petProfile_id              Int    @unique
//   important_information_text String
// }

model PhoneNumber {
  phone_number_id       Int    @id @default(autoincrement())
  // Pet                   Pet?   @relation(fields: [petProfile_id], references: [profile_id])
  // petProfile_id         Int
  phone_number          String
  phone_number_priority Int    @default(0)

  // @@id([petProfile_id, phone_number])
  // Country             Country? @relation(fields: [countryLanguage_key], references: [country_key])
  // countryLanguage_key String?
  Contact           Contact? @relation(fields: [contactContact_id], references: [contact_id], onDelete: Cascade)
  contactContact_id Int?
}

model HealthIssue {
  health_issue_id                          Int                @id @default(autoincrement())
  health_issue_name                        String
  // health_issue_type                        HealthIssueType
  health_issue_type                        String             @default("Allergies")
  linked_document                          Document?          @relation(fields: [documentDocument_id], references: [document_id])
  documentDocument_id                      Int?
  // health_issue_text                        String
  MedicalInformation                       MedicalInformation @relation(fields: [medicalInformationMedical_information_id], references: [medical_information_id])
  medicalInformationMedical_information_id Int
}

model MedicalInformation {
  medical_information_id Int           @id @default(autoincrement())
  Pet                    Pet           @relation(fields: [petProfile_id], references: [profile_id], onDelete: Cascade)
  petProfile_id          Int           @unique
  health_issues          HealthIssue[]
  sterilized             Boolean?
  breed                  String?
  age                    String?
  vaccinations           String?
  allergies              String?
  medications            String?
  chronicConditions      String?
}

model BehaviourInformation {
  behaviour_information_id Int      @id @default(autoincrement())
  Pet                      Pet      @relation(fields: [petProfile_id], references: [profile_id], onDelete: Cascade)
  petProfile_id            Int      @unique
  good_with_kids           Boolean?
  good_with_cats           Boolean?
  good_with_dogs           Boolean?
  good_with_cars           Boolean?
  good_with_strangers      Boolean?
}

model Document {
  document_id      Int           @id @default(autoincrement())
  Pet              Pet           @relation(fields: [petProfile_id], references: [profile_id], onDelete: Cascade)
  petProfile_id    Int
  document_name    String
  document_link    String
  // document_type DocumentType
  content_type     String        @default("udf")
  HealthIssue      HealthIssue[]
  size_megabyte    Float         @default(0)
  uploadedDateTime DateTime      @default(now())
}

model PetPicture {
  pet_picture_id       Int      @id @default(autoincrement())
  Pet                  Pet      @relation(fields: [petProfile_id], references: [profile_id], onDelete: Cascade)
  petProfile_id        Int
  pet_picture_link     String
  pet_picture_priority Int
  size_megabyte        Float    @default(0)
  uploadedDateTime     DateTime @default(now())
}

// https://ipgeolocation.io/ip-location/78.104.182.197
model Scan {
  scan_id         Int      @id @default(autoincrement())
  Pet             Pet      @relation(fields: [petProfile_id], references: [profile_id], onDelete: Cascade)
  petProfile_id   Int
  scan_DateTime   DateTime @default(now())
  scan_ip_address String
  scan_city       String
  scan_country    String
  //evtl device info
}

//?Maybe just Link to website better
// model FAQ {
//   faq_id       Int    @id @default(autoincrement())
//   faq_category String
//   faq_
// }

model ContactUs {
  contact_us_id  Int     @id @default(autoincrement())
  user           User    @relation(fields: [uid], references: [uid], onDelete: Cascade)
  uid            String
  categorie      String
  text           String
  declared_name  String
  declared_email String
  seen           Boolean @default(false)
}

model DeletedUser {
  delted_user_id Int    @id @default(autoincrement())
  message        String
  reason         String
}
