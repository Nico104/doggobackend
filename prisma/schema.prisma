generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  NONE
}

enum LetterStyle {
  April1
  April2
  April3
}

model Language {
  language_key                          String                 @id @unique
  language_label                        String
  language_image_path                   String
  language_country                      String
  language_country_prefix               String
  language_isAvailableForAppTranslation Boolean                @default(false)
  Description                           Description[]
  ImportantInformation                  ImportantInformation[]
  PhoneNumber                           PhoneNumber[]
}

model User {
  useremail          String       @id @unique
  userSignUpDateTime DateTime     @default(now())
  userpassword       String
  user_pet_profile   Pet[]
  Tag                CollarTag[]
  UserLogins         UserLogins[]
}

model PendingAccount {
  pendingAccountId Int      @id @default(autoincrement())
  pendingEmail     String
  verificationCode Int
  approved         Boolean  @default(false)
  isValid          Boolean  @default(true)
  createdDate      DateTime @default(now())
}

// model UserSettings {
//   username         String   @id
//   isDarkTheme      Boolean  @default(true)
//   userLanguageName String
//   userLanguage     Language @relation(fields: [userLanguageName], references: [languageName])
//   user             User     @relation(fields: [username], references: [username])
// }

model UserLogins {
  userLgoin_id  Int      @id @default(autoincrement())
  user          User     @relation(fields: [userUseremail], references: [useremail])
  userUseremail String
  ipAddress     String?
  loginDateTime DateTime @default(now())
}

model CollarTag {
  collarTag_id             String                    @id @unique
  assigned_pet             Pet?                      @relation(fields: [petProfile_id], references: [profile_id])
  petProfile_id            Int?
  assigned_user            User?                     @relation(fields: [assignedUseremail], references: [useremail])
  assignedUseremail        String?
  activationCode           String                    @unique
  CollarTagPersonalisation CollarTagPersonalisation?
}

model CollarTagPersonalisation {
  collarTagPersonalisationId Int          @id @default(autoincrement())
  collarTag                  CollarTag    @relation(fields: [collarTag_id], references: [collarTag_id])
  collarTag_id               String       @unique
  primaryColorName           String
  secondaryColorName         String
  baseColorName              String
  letter                     String?
  letterStyle                LetterStyle?

  appBackgroundColorHex   String
  appPetTagPrimaryColor   String
  appPetTagSecundaryColor String
}

model Pet {
  profile_id                  Int                    @id @default(autoincrement())
  profile_creation_DateTime   DateTime               @default(now())
  pet_profile_user            User                   @relation(fields: [pet_profile_username], references: [useremail])
  pet_profile_username        String
  pet_name                    String
  pet_gender                  Gender?
  pet_chip_id                 String?
  pet_description             Description[]
  pet_important_information   ImportantInformation[]
  pet_owner_name              String?
  pet_owner_telephone_numbers PhoneNumber[]
  pet_owner_email             String?
  pet_owner_living_place      String?
  pet_owner_facebook          String?
  pet_owner_instagram         String?
  pet_documents               Document[]
  pet_pictures                PetPicture[]
  pet_is_Lost                 Boolean
  pet_profile_scans           Scan[]
  Tag                         CollarTag[]
}

model Description {
  Pet                      Pet      @relation(fields: [petProfile_id], references: [profile_id])
  petProfile_id            Int
  description_text         String
  description_language     Language @relation(fields: [description_language_key], references: [language_key])
  description_language_key String

  @@id([petProfile_id, description_language_key])
}

model ImportantInformation {
  Pet                                Pet      @relation(fields: [petProfile_id], references: [profile_id])
  petProfile_id                      Int
  important_information_text         String
  important_information_language     Language @relation(fields: [important_information_language_key], references: [language_key])
  important_information_language_key String

  @@id([petProfile_id, important_information_language_key])
}

model PhoneNumber {
  Pet                   Pet?     @relation(fields: [petProfile_id], references: [profile_id])
  petProfile_id         Int
  phone_number          String
  phone_number_priority Int
  phone_number_Language Language @relation(fields: [languageLanguage_key], references: [language_key])
  languageLanguage_key  String   @default("en")

  @@id([petProfile_id, phone_number])
}

model Document {
  document_id   Int    @id @default(autoincrement())
  Pet           Pet    @relation(fields: [petProfile_id], references: [profile_id])
  petProfile_id Int
  document_name String
  document_link String
}

model PetPicture {
  pet_picture_id       Int    @id @default(autoincrement())
  Pet                  Pet    @relation(fields: [petProfile_id], references: [profile_id])
  petProfile_id        Int
  pet_picture_link     String
  pet_picture_priority Int
}

model Scan {
  scan_id         Int      @id @default(autoincrement())
  Pet             Pet      @relation(fields: [petProfile_id], references: [profile_id])
  petProfile_id   Int
  scan_DateTime   DateTime @default(now())
  scan_ip_address String
}
