generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  NONE
}

enum LetterStyle {
  April1
  April2
  April3
}

enum HealthIssueType {
  Allergies
  Medication
}

// enum DocumentType {
//   Allergies
//   Dewormers
//   Health
//   Medicine
//   Noid
// }

model Country {
  country_key             String        @id @unique
  country_flag_image_path String
  country_phone_prefix    String
  country_language        Language      @relation(fields: [language_key], references: [language_key])
  language_key            String
  PhoneNumber             PhoneNumber[]
}

model Language {
  language_key                          String                 @id @unique
  language_key_translate                String                 @default("EN")
  language_label                        String
  language_isAvailableForAppTranslation Boolean                @default(false)
  langauge_flag_image_path              String                 @default("flags/langauge/english_flag.png")
  Description                           Description[]
  ImportantInformation                  ImportantInformation[]
  Country                               Country[]
}

// model User {
//   useremail                   String                        @id @unique
//   userSignUpDateTime          DateTime                      @default(now())
//   userpassword                String
//   name                        String                        @default("")
//   user_pet_profile            Pet[]
//   Tag                         CollarTag[]
//   UserLogins                  UserLogins[]
//   ContactDescription          ContactDescription[]
//   ChangeEmailVerificationCode ChangeEmailVerificationCode[]
//   Contact                     Contact[]
//   DeviceMessagingToken        DeviceMessagingToken[]
//   Notification                Notification[]
// }

model User {
  uid                  String                 @id @unique
  displayName          String?
  email                String
  providerId           String
  email_verified       Boolean
  userSignUpDateTime   DateTime               @default(now())
  // userpassword                String
  Pet                  Pet[]
  Tag                  CollarTag[]
  UserLogins           UserLogins[]
  ContactDescription   ContactDescription[]
  // ChangeEmailVerificationCode ChangeEmailVerificationCode[]
  Contact              Contact[]
  DeviceMessagingToken DeviceMessagingToken[]
  Notification         Notification[]
}

// model User {
//   uid                   String                        @id @unique
//   userSignUpDateTime          DateTime                      @default(now())
//   userpassword                String
//   name                        String                        @default("")
//   user_pet_profile            Pet[]
//   Tag                         CollarTag[]
//   UserLogins                  UserLogins[]
//   ContactDescription          ContactDescription[]
//   ChangeEmailVerificationCode ChangeEmailVerificationCode[]
//   Contact                     Contact[]
//   DeviceMessagingToken        DeviceMessagingToken[]
//   Notification                Notification[]
// }

//Could become logged in device
model DeviceMessagingToken {
  token String @id
  User  User   @relation(fields: [uid], references: [uid], onDelete: Cascade)
  uid   String
}

model Notification {
  notificationId    Int      @id @default(autoincrement())
  notificationType  String
  notificationTitle String
  notificationBody  String
  creationDateTime  DateTime @default(now())
  read              Boolean  @default(false)
  seen              Boolean  @default(false)
  User              User     @relation(fields: [uid], references: [uid], onDelete: Cascade)
  uid               String
}

// model PendingAccount {
//   pendingAccountId Int      @id @default(autoincrement())
//   pendingEmail     String
//   verificationCode Int
//   approved         Boolean  @default(false)
//   isValid          Boolean  @default(true)
//   createdDate      DateTime @default(now())
// }

// model ChangeEmailVerificationCode {
//   changeEmailVerificationCodeId Int       @id @default(autoincrement())
//   verificationCode              String
//   email                         String
//   sendBy                        User?     @relation(fields: [uid], references: [uid])
//   uid                 String?
//   isValid                       Boolean   @default(true)
//   createdDateTime               DateTime  @default(now())
//   verifiedDateTime              DateTime?
//   unvalidifiedDateTime          DateTime?
// }

// model UserSettings {
//   username         String   @id
//   isDarkTheme      Boolean  @default(true)
//   userLanguageName String
//   userLanguage     Language @relation(fields: [userLanguageName], references: [languageName])
//   user             User     @relation(fields: [username], references: [username])
// }

model UserLogins {
  userLgoin_id  Int      @id @default(autoincrement())
  user          User     @relation(fields: [uid], references: [uid])
  uid           String
  ipAddress     String?
  loginDateTime DateTime @default(now())
}

model CollarTag {
  collarTag_id   String    @id @unique
  assigned_pet   Pet?      @relation(fields: [petProfile_id], references: [profile_id])
  petProfile_id  Int?
  user           User?     @relation(fields: [uid], references: [uid])
  uid            String?
  assignedDate   DateTime?
  activationCode String    @unique
  // CollarTagPersonalisation CollarTagPersonalisation?
  picturePath    String
  createdDate    DateTime  @default(now())
}

// model CollarTagPersonalisation {
//   collarTagPersonalisationId Int          @id @default(autoincrement())
//   collarTag                  CollarTag    @relation(fields: [collarTag_id], references: [collarTag_id])
//   collarTag_id               String       @unique
//   primaryColorName           String
//   secondaryColorName         String
//   baseColorName              String
//   letter                     String?
//   letterStyle                LetterStyle?

//   appBackgroundColorHex   String
//   appPetTagPrimaryColor   String
//   appPetTagSecundaryColor String
// }

model Pet {
  profile_id                Int                    @id @default(autoincrement())
  profile_creation_DateTime DateTime               @default(now())
  user                      User                   @relation(fields: [uid], references: [uid])
  //should be pet_profile_useremail
  uid                       String
  pet_name                  String
  pet_gender                Gender?
  pet_chip_id               String?
  pet_description           Description[]
  pet_important_information ImportantInformation[]
  pet_documents             Document[]
  pet_pictures              PetPicture[]
  pet_is_Lost               Boolean
  pet_profile_scans         Scan[]
  Tag                       CollarTag[]
  Contact                   Contact[]
  MedicalInformation        MedicalInformation?
  // medical_information_id    Int
  BehaviourInformation      BehaviourInformation?
  // behaviour_information_id  Int
}

model Contact {
  contact_id                               Int                 @id @default(autoincrement())
  contact_creation_DateTime                DateTime            @default(now())
  contact_name                             String
  contact_picture_link                     String?
  contact_description                      ContactDescription? @relation(fields: [contactDescriptionContact_description_id], references: [contact_description_id])
  contactDescriptionContact_description_id Int?
  contact_telephone_numbers                PhoneNumber[]
  contact_email                            String?
  contact_address                          String?
  contact_facebook                         String?
  contact_instagram                        String?
  // Pet                                      Pet                 @relation(fields: [petProfile_id], references: [profile_id], onDelete: Cascade)
  // petProfile_id                            Int
  Pet                                      Pet[]
  createdBy                                User                @relation(fields: [uid], references: [uid])
  uid                                      String
}

model ContactDescription {
  contact_description_id                Int       @id @default(autoincrement())
  contact_description_label             String
  contact_description_hex               String
  Contact                               Contact[]
  created_by                            User      @relation(fields: [uid], references: [uid])
  uid                                   String
  contact_description_creation_DateTime DateTime  @default(now())
  contact_description_updated_DateTime  DateTime  @default(now())
}

model Description {
  Pet                      Pet      @relation(fields: [petProfile_id], references: [profile_id], onDelete: Cascade)
  petProfile_id            Int
  description_text         String
  description_language     Language @relation(fields: [description_language_key], references: [language_key])
  description_language_key String

  @@id([petProfile_id, description_language_key])
}

model ImportantInformation {
  Pet                                Pet      @relation(fields: [petProfile_id], references: [profile_id], onDelete: Cascade)
  petProfile_id                      Int
  important_information_text         String
  important_information_language     Language @relation(fields: [important_information_language_key], references: [language_key])
  important_information_language_key String

  @@id([petProfile_id, important_information_language_key])
}

model PhoneNumber {
  phone_number_id       Int    @id @default(autoincrement())
  // Pet                   Pet?   @relation(fields: [petProfile_id], references: [profile_id])
  // petProfile_id         Int
  phone_number          String
  phone_number_priority Int    @default(0)

  // @@id([petProfile_id, phone_number])
  Country             Country? @relation(fields: [countryLanguage_key], references: [country_key])
  countryLanguage_key String?
  Contact             Contact? @relation(fields: [contactContact_id], references: [contact_id], onDelete: Cascade)
  contactContact_id   Int?
}

model HealthIssue {
  health_issue_id                          Int                @id @default(autoincrement())
  health_issue_name                        String
  health_issue_type                        HealthIssueType
  linked_document                          Document?          @relation(fields: [documentDocument_id], references: [document_id])
  documentDocument_id                      Int?
  // health_issue_text                        String
  MedicalInformation                       MedicalInformation @relation(fields: [medicalInformationMedical_information_id], references: [medical_information_id])
  medicalInformationMedical_information_id Int
}

model MedicalInformation {
  medical_information_id Int           @id @default(autoincrement())
  Pet                    Pet           @relation(fields: [petProfile_id], references: [profile_id], onDelete: Cascade)
  petProfile_id          Int           @unique
  health_issues          HealthIssue[]
  sterilized             Boolean?
}

model BehaviourInformation {
  behaviour_information_id Int      @id @default(autoincrement())
  Pet                      Pet      @relation(fields: [petProfile_id], references: [profile_id], onDelete: Cascade)
  petProfile_id            Int      @unique
  good_with_kids           Boolean?
  good_with_cats           Boolean?
  good_with_dogs           Boolean?
  good_with_cars           Boolean?
  good_with_strangers      Boolean?
}

model Document {
  document_id   Int           @id @default(autoincrement())
  Pet           Pet           @relation(fields: [petProfile_id], references: [profile_id], onDelete: Cascade)
  petProfile_id Int
  document_name String
  document_link String
  // document_type DocumentType
  content_type  String        @default("udf")
  HealthIssue   HealthIssue[]
}

model PetPicture {
  pet_picture_id       Int    @id @default(autoincrement())
  Pet                  Pet    @relation(fields: [petProfile_id], references: [profile_id], onDelete: Cascade)
  petProfile_id        Int
  pet_picture_link     String
  pet_picture_priority Int
}

// https://ipgeolocation.io/ip-location/78.104.182.197
model Scan {
  scan_id         Int      @id @default(autoincrement())
  Pet             Pet      @relation(fields: [petProfile_id], references: [profile_id], onDelete: Cascade)
  petProfile_id   Int
  scan_DateTime   DateTime @default(now())
  scan_ip_address String
  scan_city       String
  scan_country    String
  //evtl device info
}

//?Maybe just Link to website better
// model FAQ {
//   faq_id       Int    @id @default(autoincrement())
//   faq_category String
//   faq_
// }
